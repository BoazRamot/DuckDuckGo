{"version":3,"sources":["slices/appSlice.js","apis/duckduckgoList.js","components/HistoryDrawer.js","components/MainAppBar.js","components/Search.js","components/SearchResults/SearchResultsBar.js","components/SearchResults/TableBodyRows.js","components/SearchResults/SearchTable.js","components/SearchResults/SearchResultsTable.js","components/SearchResults/SearchResults.js","App.js","reportWebVitals.js","slices/duckduckgoSlice.js","store/store.js","index.js"],"names":["appSlice","createSlice","name","initialState","isDarkMode","reducers","changeDarkMode","state","actions","BASE_URL","getDuckduckgoList","createAsyncThunk","q","a","axios","method","url","params","data","getDuckduckgoPersistList","query","getDuckduckgoQueriesList","toString","split","useStyles","makeStyles","theme","drawer","width","flexShrink","drawerPaper","drawerHeader","display","alignItems","padding","spacing","mixins","toolbar","justifyContent","HistoryDrawer","open","handleDrawerClose","setDuckduckgoSearch","handleDuckduckgoSearch","pastQueries","useSelector","duckduckgo","classes","useTheme","handlePastQureyClick","event","text","currentTarget","id","Drawer","className","variant","anchor","paper","IconButton","onClick","direction","Divider","List","map","index","ListItem","button","ListItemText","primary","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","grow","flexGrow","MainAppBar","handleDrawerOpen","darkModeHandler","AppBar","position","clsx","Toolbar","color","edge","Typography","noWrap","serachRoot","serachInput","flex","serachIconButton","Search","handleSearchStr","handleSearchStrClear","duckduckgoSearch","Paper","component","onSubmit","preventDefault","InputBase","placeholder","value","onChange","type","tableBody","height","tableSearch","borderRadius","shape","backgroundColor","alpha","palette","common","white","breakpoints","up","tableSearchIcon","pointerEvents","tableInputRoot","tableInputInput","paddingLeft","SearchResultsBar","strCounter","searchStr","Badge","badgeContent","root","input","Row","style","rows","page","rowsPerPage","item","slice","title","toLowerCase","includes","strIndexArray","Set","idx","length","strIndex","indexOf","add","formatedText","counter","has","push","window","TableBodyRows","itemCount","numOfStrRef","ref","itemSize","Math","max","itemData","tablePaper","flexFlow","marginBottom","table","minWidth","tableRow","SearchTable","Table","TableBody","SearchResultsTable","setStrCounter","useState","setPage","setRowsPerPage","useRef","getSumOfStr","useCallback","current","rowsInTable","props","sum","element","regExp","RegExp","match","useEffect","TablePagination","rowsPerPageOptions","label","count","onPageChange","newPage","onRowsPerPageChange","parseInt","target","SearchResults","contentRoot","minHeight","paddingTop","contentRootShift","App","setOpen","setSearchStr","app","dispatch","useDispatch","useMemo","createTheme","val","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","duckduckgoSlice","loading","error","setPastQueries","action","payload","addToPastQueries","extraReducers","fulfilled","configureStore","reducer","appReducer","duckduckgoReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.9c56abcd.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    isDarkMode: true,\r\n  },\r\n  reducers: {\r\n    changeDarkMode: (state) => {\r\n      state.isDarkMode = !state.isDarkMode;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changeDarkMode } = appSlice.actions;\r\n\r\nexport default appSlice.reducer;\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const BASE_URL = 'http://localhost:5000/api/duckduckgo';\r\n\r\nexport const getDuckduckgoList = createAsyncThunk(\r\n  'duckduckgo/getDuckduckgoList',\r\n  async (q) => {\r\n    const data = await axios({\r\n      method: 'get',\r\n      url: `${BASE_URL}/getList`,\r\n      params: { q },\r\n    });\r\n    return data.data;\r\n  },\r\n);\r\n\r\nexport const getDuckduckgoPersistList = createAsyncThunk(\r\n  'duckduckgo/getDuckduckgoPersistList',\r\n  async (q) => {\r\n    const data = await axios({\r\n      method: 'post',\r\n      url: `${BASE_URL}/persist`,\r\n      data: { q },\r\n    });\r\n    return { data: data.data, query: q };\r\n  },\r\n);\r\n\r\nexport const getDuckduckgoQueriesList = createAsyncThunk(\r\n  'duckduckgo/getDuckduckgoQueriesList',\r\n  async () => {\r\n    const data = await axios({\r\n      method: 'get',\r\n      url: `${BASE_URL}/getPersistList`,\r\n    });\r\n    return data.data.toString().split('*@*');\r\n  },\r\n);\r\n","import { useSelector } from 'react-redux';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport {\r\n  IconButton,\r\n  Divider,\r\n  ListItem,\r\n  ListItemText,\r\n  Drawer,\r\n  List,\r\n} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n}));\r\n\r\nfunction HistoryDrawer({\r\n  open,\r\n  handleDrawerClose,\r\n  setDuckduckgoSearch,\r\n  handleDuckduckgoSearch,\r\n}) {\r\n  const { pastQueries } = useSelector((state) => ({\r\n    pastQueries: state.duckduckgo.pastQueries,\r\n  }));\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const handlePastQureyClick = (event) => {\r\n    const text = event.currentTarget.id.split('.ListItem')[0];\r\n    if (!text) return;\r\n    setDuckduckgoSearch(text);\r\n    handleDuckduckgoSearch(text, 'not_persist');\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      className={classes.drawer}\r\n      variant=\"persistent\"\r\n      anchor=\"left\"\r\n      open={open}\r\n      classes={{\r\n        paper: classes.drawerPaper,\r\n      }}\r\n    >\r\n      <div className={classes.drawerHeader}>\r\n        <IconButton onClick={handleDrawerClose}>\r\n          {theme.direction === 'ltr' ? (\r\n            <ChevronLeftIcon />\r\n          ) : (\r\n            <ChevronRightIcon />\r\n          )}\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <List>\r\n        {pastQueries.map((text, index) => (\r\n          <ListItem\r\n            button\r\n            key={`${text}.ListItem.${index}`}\r\n            id={`${text}.ListItem.${index}`}\r\n            onClick={handlePastQureyClick}\r\n          >\r\n            <ListItemText\r\n              primary={text}\r\n              id={`${text}.ListItem.${index}`}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default HistoryDrawer;\r\n","import clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport LightIcon from '@material-ui/icons/Brightness7';\r\nimport DarkIcon from '@material-ui/icons/Brightness4';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction MainAppBar({\r\n  open,\r\n  handleDrawerOpen,\r\n  darkModeHandler,\r\n  isDarkMode,\r\n}) {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar\r\n      position=\"fixed\"\r\n      className={clsx(classes.appBar, {\r\n        [classes.appBarShift]: open,\r\n      })}\r\n    >\r\n      <Toolbar>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          onClick={handleDrawerOpen}\r\n          edge=\"start\"\r\n          className={clsx(classes.menuButton, open && classes.hide)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" noWrap>\r\n          DuckDuckGo Api Results\r\n        </Typography>\r\n        <div className={classes.grow} />\r\n        <IconButton onClick={darkModeHandler}>\r\n          {isDarkMode ? <LightIcon /> : <DarkIcon />}\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default MainAppBar;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { IconButton, InputBase, Paper } from '@material-ui/core';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  serachRoot: {\r\n    padding: '2px 4px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: 400,\r\n  },\r\n  serachInput: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1,\r\n  },\r\n  serachIconButton: {\r\n    padding: 10,\r\n  },\r\n}));\r\n\r\nfunction Search({\r\n  handleDuckduckgoSearch,\r\n  handleSearchStr,\r\n  handleSearchStrClear,\r\n  duckduckgoSearch,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const handleSerach = (event) => {\r\n    event.preventDefault();\r\n    handleDuckduckgoSearch(duckduckgoSearch);\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      component=\"form\"\r\n      className={classes.serachRoot}\r\n      onSubmit={handleSerach}\r\n    >\r\n      <InputBase\r\n        className={classes.serachInput}\r\n        placeholder=\"Search Duckduckgo\"\r\n        value={duckduckgoSearch}\r\n        onChange={handleSearchStr}\r\n        id=\"duckduckgo\"\r\n      />\r\n      {duckduckgoSearch && (\r\n        <IconButton\r\n          onClick={handleSearchStrClear}\r\n          className={classes.serachIconButton}\r\n          id=\"duckduckgoClear\"\r\n        >\r\n          <HighlightOffIcon />\r\n        </IconButton>\r\n      )}\r\n      <IconButton type=\"submit\" className={classes.serachIconButton}>\r\n        <SearchIcon />\r\n      </IconButton>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import { alpha, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  Toolbar,\r\n  Typography,\r\n  InputBase,\r\n  Badge,\r\n} from '@material-ui/core';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableBody: {\r\n    height: 'calc(80vh - 64px - 52px - 10rem)',\r\n  },\r\n  tableSearch: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  tableSearchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  tableInputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  tableInputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  serachIconButton: {\r\n    padding: 10,\r\n  },\r\n}));\r\n\r\nfunction SearchResultsBar({\r\n  strCounter,\r\n  searchStr,\r\n  handleSearchStr,\r\n  handleSearchStrClear,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"sticky\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" component=\"div\">\r\n          DuckDuckGo Search Results\r\n        </Typography>\r\n        <div className={classes.grow} />\r\n        <Badge badgeContent={strCounter} color=\"error\">\r\n          <div className={classes.tableSearch}>\r\n            <div className={classes.tableSearchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.tableInputRoot,\r\n                input: classes.tableInputInput,\r\n              }}\r\n              value={searchStr || ''}\r\n              onChange={handleSearchStr}\r\n              id=\"table\"\r\n            />\r\n            {searchStr && (\r\n              <IconButton\r\n                onClick={handleSearchStrClear}\r\n                className={classes.serachIconButton}\r\n                id=\"tableClear\"\r\n              >\r\n                <HighlightOffIcon />\r\n              </IconButton>\r\n            )}\r\n          </div>\r\n        </Badge>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default SearchResultsBar;\r\n","import { ListItem, ListItemText } from '@material-ui/core';\r\nimport { FixedSizeList } from 'react-window';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\n\r\nconst Row = ({ data, index, style }) => {\r\n  const { rows, page, rowsPerPage, searchStr, className } = data;\r\n  const item = rows.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage,\r\n  )[index];\r\n  let text = item?.title;\r\n  if (\r\n    text?.toLowerCase().includes(searchStr.toLowerCase()) &&\r\n    searchStr !== ''\r\n  ) {\r\n    let strIndexArray = new Set();\r\n    for (let idx = 0; idx < text.length; idx++) {\r\n      const strIndex = text\r\n        .toLowerCase()\r\n        .indexOf(searchStr.toLowerCase(), idx);\r\n      if (strIndex !== -1) {\r\n        strIndexArray.add(strIndex);\r\n        idx = strIndex;\r\n      } else {\r\n        idx = text.length - 1;\r\n      }\r\n    }\r\n    let formatedText = [];\r\n    let counter = 0;\r\n    for (let idx = 0; idx < text.length; idx++) {\r\n      if (\r\n        strIndexArray.has(idx) ||\r\n        (counter > 0 && counter < searchStr.length)\r\n      ) {\r\n        counter++;\r\n        formatedText.push(\r\n          <span\r\n            key={text[idx] + idx}\r\n            data-row=\"true\"\r\n            className={className}\r\n          >\r\n            {text[idx]}\r\n          </span>,\r\n        );\r\n      } else {\r\n        counter = 0;\r\n        formatedText.push(\r\n          <span key={text[idx] + idx}>{text[idx]}</span>,\r\n        );\r\n      }\r\n    }\r\n    text = formatedText;\r\n  }\r\n\r\n  const handleRowClick = () => {\r\n    if (!item?.url) return;\r\n    window.open(item.url, '_blank');\r\n  };\r\n\r\n  return (\r\n    <ListItem button style={style} onClick={handleRowClick}>\r\n      <ListItemText primary={text} />\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nfunction TableBodyRows({\r\n  itemCount,\r\n  rows,\r\n  page,\r\n  rowsPerPage,\r\n  searchStr,\r\n  numOfStrRef,\r\n  className,\r\n}) {\r\n  return (\r\n    <AutoSizer>\r\n      {({ height, width }) => (\r\n        <FixedSizeList\r\n          ref={numOfStrRef}\r\n          className=\"List\"\r\n          height={height}\r\n          itemCount={itemCount}\r\n          itemSize={Math.max(height / itemCount, 35)}\r\n          width={width}\r\n          itemData={{\r\n            rows,\r\n            page,\r\n            rowsPerPage,\r\n            searchStr,\r\n            className,\r\n          }}\r\n        >\r\n          {Row}\r\n        </FixedSizeList>\r\n      )}\r\n    </AutoSizer>\r\n  );\r\n}\r\n\r\nexport default TableBodyRows;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { Table, TableBody } from '@material-ui/core';\r\nimport TableBodyRows from './TableBodyRows';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tablePaper: {\r\n    width: '80%',\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    height: 'calc(80vh - 10rem)',\r\n    marginBottom: '5rem',\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  tableBody: {\r\n    height: 'calc(80vh - 64px - 52px - 10rem)',\r\n  },\r\n  tableRow: {\r\n    backgroundColor: 'yellow',\r\n  },\r\n}));\r\n\r\nfunction SearchTable({\r\n  searchStr,\r\n  numOfStrRef,\r\n  page,\r\n  rowsPerPage,\r\n  rows,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Table className={classes.table} component=\"div\">\r\n      <TableBody component=\"div\" className={classes.tableBody}>\r\n        <TableBodyRows\r\n          itemCount={rowsPerPage}\r\n          rows={rows}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          searchStr={searchStr}\r\n          numOfStrRef={numOfStrRef}\r\n          className={classes.tableRow}\r\n        />\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default SearchTable;\r\n","import { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TablePagination } from '@material-ui/core';\r\nimport SearchTable from './SearchTable';\r\n\r\nfunction SearchResultsTable({ searchStr, setStrCounter }) {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const numOfStrRef = useRef();\r\n  const { rows } = useSelector((state) => ({\r\n    rows: state.duckduckgo.rows,\r\n  }));\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const getSumOfStr = useCallback(() => {\r\n    if (!numOfStrRef.current || searchStr.length === 0) {\r\n      setStrCounter(0);\r\n      return;\r\n    }\r\n    const rowsInTable = numOfStrRef.current.props.itemData.rows.slice(\r\n      page * rowsPerPage,\r\n      page * rowsPerPage + rowsPerPage,\r\n    );\r\n    let sum = 0;\r\n    for (let index = 0; index < rowsInTable.length; index++) {\r\n      const element = rowsInTable[index].title.toLowerCase();\r\n      const regExp = new RegExp(searchStr.toLowerCase(), 'g');\r\n      const count = (element.match(regExp) || []).length;\r\n      sum += count;\r\n    }\r\n    setStrCounter(sum);\r\n  }, [page, rowsPerPage, searchStr, setStrCounter]);\r\n\r\n  useEffect(() => {\r\n    getSumOfStr();\r\n  }, [getSumOfStr]);\r\n\r\n  return (\r\n    <>\r\n      <SearchTable\r\n        searchStr={searchStr}\r\n        numOfStrRef={numOfStrRef}\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        rows={rows}\r\n      />\r\n      <TablePagination\r\n        rowsPerPageOptions={[\r\n          5,\r\n          10,\r\n          25,\r\n          { value: rows.length, label: 'All' },\r\n        ]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchResultsTable;\r\n","import { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper } from '@material-ui/core';\r\nimport SearchResultsBar from './SearchResultsBar';\r\nimport SearchResultsTable from './SearchResultsTable';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tablePaper: {\r\n    width: '80%',\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    height: 'calc(80vh - 10rem)',\r\n    marginBottom: '5rem',\r\n  },\r\n}));\r\n\r\nfunction SearchResults({\r\n  handleSearchStrClear,\r\n  handleSearchStr,\r\n  searchStr,\r\n}) {\r\n  const [strCounter, setStrCounter] = useState(0);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.tablePaper}>\r\n      <SearchResultsBar\r\n        strCounter={strCounter}\r\n        searchStr={searchStr}\r\n        handleSearchStr={handleSearchStr}\r\n        handleSearchStrClear={handleSearchStrClear}\r\n      />\r\n      <SearchResultsTable\r\n        searchStr={searchStr}\r\n        setStrCounter={setStrCounter}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default SearchResults;\r\n","import { useEffect, useState, useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Paper } from '@material-ui/core';\nimport { makeStyles, createTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { changeDarkMode } from './slices/appSlice';\nimport {\n  getDuckduckgoList,\n  getDuckduckgoPersistList,\n  getDuckduckgoQueriesList,\n} from './apis/duckduckgoList';\nimport HistoryDrawer from './components/HistoryDrawer';\nimport MainAppBar from './components/MainAppBar';\nimport Search from './components/Search';\nimport SerarchResults from './components/SearchResults/SearchResults';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  contentRoot: {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    alignItems: 'center',\n    minHeight: 'calc(100vh - 10rem)',\n    justifyContent: 'space-between',\n    flexGrow: 1,\n    paddingTop: '10rem',\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  contentRootShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: drawerWidth,\n  },\n}));\n\nfunction App() {\n  const [open, setOpen] = useState(true);\n  const [duckduckgoSearch, setDuckduckgoSearch] = useState('');\n  const [searchStr, setSearchStr] = useState('');\n  const { isDarkMode } = useSelector((state) => ({\n    isDarkMode: state.app.isDarkMode,\n  }));\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          type: isDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [isDarkMode],\n  );\n\n  const darkModeHandler = () => {\n    dispatch(changeDarkMode());\n  };\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleSearchStr = (event) => {\n    const { id, value } = event.target;\n    if (id === 'table') {\n      setSearchStr(value);\n    } else {\n      setDuckduckgoSearch(value);\n    }\n  };\n\n  const handleSearchStrClear = (event) => {\n    const { id } = event.currentTarget;\n    if (id === 'tableClear') {\n      setSearchStr('');\n    } else {\n      setDuckduckgoSearch('');\n    }\n  };\n\n  const handleDuckduckgoSearch = (val, id) => {\n    if (id === 'not_persist') {\n      dispatch(getDuckduckgoList(val));\n    } else {\n      dispatch(getDuckduckgoPersistList(val));\n    }\n  };\n\n  useEffect(() => {\n    dispatch(getDuckduckgoQueriesList());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ThemeProvider theme={theme}>\n        <HistoryDrawer\n          open={open}\n          handleDrawerClose={handleDrawerClose}\n          setDuckduckgoSearch={setDuckduckgoSearch}\n          handleDuckduckgoSearch={handleDuckduckgoSearch}\n        />\n        <Paper\n          className={clsx(classes.contentRoot, {\n            [classes.contentRootShift]: open,\n          })}\n        >\n          <MainAppBar\n            open={open}\n            handleDrawerOpen={handleDrawerOpen}\n            darkModeHandler={darkModeHandler}\n            isDarkMode={isDarkMode}\n          />\n          <Search\n            handleDuckduckgoSearch={handleDuckduckgoSearch}\n            handleSearchStr={handleSearchStr}\n            handleSearchStrClear={handleSearchStrClear}\n            duckduckgoSearch={duckduckgoSearch}\n          />\n          <SerarchResults\n            handleSearchStrClear={handleSearchStrClear}\n            handleSearchStr={handleSearchStr}\n            searchStr={searchStr}\n          />\n        </Paper>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport {\r\n  getDuckduckgoList,\r\n  getDuckduckgoPersistList,\r\n  getDuckduckgoQueriesList,\r\n} from '../apis/duckduckgoList';\r\n\r\nexport const duckduckgoSlice = createSlice({\r\n  name: 'duckduckgo',\r\n  initialState: {\r\n    rows: [],\r\n    pastQueries: [],\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    setPastQueries: (state, action) => {\r\n      state.pastQueries = action.payload;\r\n    },\r\n    addToPastQueries: (state, action) => {\r\n      state.pastQueries.push(action.payload);\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getDuckduckgoList.fulfilled]: (state, action) => {\r\n      state.rows = action.payload;\r\n    },\r\n    [getDuckduckgoPersistList.fulfilled]: (state, action) => {\r\n      state.rows = action.payload.data;\r\n      state.pastQueries.push(action.payload.query);\r\n    },\r\n    [getDuckduckgoQueriesList.fulfilled]: (state, action) => {\r\n      state.pastQueries = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setPastQueries, addToPastQueries } =\r\n  duckduckgoSlice.actions;\r\n\r\nexport default duckduckgoSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from '../slices/appSlice';\r\nimport duckduckgoReducer from '../slices/duckduckgoSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    duckduckgo: duckduckgoReducer,\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}